// Mocks generated by Mockito 5.4.0 from annotations
// in offertelavoroflutter_app/test/repositories/job_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:logger/src/logger.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:offertelavoroflutter_app/models/filters.dart' as _i6;
import 'package:offertelavoroflutter_app/models/job.dart' as _i4;
import 'package:offertelavoroflutter_app/models/job_freelance.dart' as _i9;
import 'package:offertelavoroflutter_app/models/sorts.dart' as _i7;
import 'package:offertelavoroflutter_app/repositories/mapper/filters_mapper.dart'
    as _i14;
import 'package:offertelavoroflutter_app/repositories/mapper/freelance_mapper.dart'
    as _i16;
import 'package:offertelavoroflutter_app/repositories/mapper/job_mapper.dart'
    as _i13;
import 'package:offertelavoroflutter_app/repositories/mapper/sorts_mapper.dart'
    as _i15;
import 'package:offertelavoroflutter_app/services/network/dto/filter_dto.dart'
    as _i5;
import 'package:offertelavoroflutter_app/services/network/dto/job_dto.dart'
    as _i3;
import 'package:offertelavoroflutter_app/services/network/dto/notion_response.dart'
    as _i2;
import 'package:offertelavoroflutter_app/services/network/dto/query_notion_request.dart'
    as _i12;
import 'package:offertelavoroflutter_app/services/network/dto/sort_dto.dart'
    as _i8;
import 'package:offertelavoroflutter_app/services/network/job_service.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotionResponse_0 extends _i1.SmartFake
    implements _i2.NotionResponse {
  _FakeNotionResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJobDTO_1 extends _i1.SmartFake implements _i3.JobDTO {
  _FakeJobDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJob_2 extends _i1.SmartFake implements _i4.Job {
  _FakeJob_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFiltersDTO_3 extends _i1.SmartFake implements _i5.FiltersDTO {
  _FakeFiltersDTO_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilters_4 extends _i1.SmartFake implements _i6.Filters {
  _FakeFilters_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSorts_5 extends _i1.SmartFake implements _i7.Sorts {
  _FakeSorts_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSortsDTO_6 extends _i1.SmartFake implements _i8.SortsDTO {
  _FakeSortsDTO_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJobFreelance_7 extends _i1.SmartFake implements _i9.JobFreelance {
  _FakeJobFreelance_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JobService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobService extends _i1.Mock implements _i10.JobService {
  MockJobService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.NotionResponse> fetchJobList(
          _i12.QueryNotionRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchJobList,
          [request],
        ),
        returnValue:
            _i11.Future<_i2.NotionResponse>.value(_FakeNotionResponse_0(
          this,
          Invocation.method(
            #fetchJobList,
            [request],
          ),
        )),
      ) as _i11.Future<_i2.NotionResponse>);
  @override
  _i11.Future<_i2.NotionResponse> fetchFreelanceList(
          _i12.QueryNotionRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFreelanceList,
          [request],
        ),
        returnValue:
            _i11.Future<_i2.NotionResponse>.value(_FakeNotionResponse_0(
          this,
          Invocation.method(
            #fetchFreelanceList,
            [request],
          ),
        )),
      ) as _i11.Future<_i2.NotionResponse>);
  @override
  _i11.Future<_i3.JobDTO> jobByID(String? id) => (super.noSuchMethod(
        Invocation.method(
          #jobByID,
          [id],
        ),
        returnValue: _i11.Future<_i3.JobDTO>.value(_FakeJobDTO_1(
          this,
          Invocation.method(
            #jobByID,
            [id],
          ),
        )),
      ) as _i11.Future<_i3.JobDTO>);
}

/// A class which mocks [JobMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobMapper extends _i1.Mock implements _i13.JobMapper {
  MockJobMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Job fromDTO(_i3.JobDTO? dto) => (super.noSuchMethod(
        Invocation.method(
          #fromDTO,
          [dto],
        ),
        returnValue: _FakeJob_2(
          this,
          Invocation.method(
            #fromDTO,
            [dto],
          ),
        ),
      ) as _i4.Job);
  @override
  _i3.JobDTO toDTO(_i4.Job? model) => (super.noSuchMethod(
        Invocation.method(
          #toDTO,
          [model],
        ),
        returnValue: _FakeJobDTO_1(
          this,
          Invocation.method(
            #toDTO,
            [model],
          ),
        ),
      ) as _i3.JobDTO);
}

/// A class which mocks [FiltersMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFiltersMapper extends _i1.Mock implements _i14.FiltersMapper {
  MockFiltersMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FiltersDTO toDTO(_i6.Filters? model) => (super.noSuchMethod(
        Invocation.method(
          #toDTO,
          [model],
        ),
        returnValue: _FakeFiltersDTO_3(
          this,
          Invocation.method(
            #toDTO,
            [model],
          ),
        ),
      ) as _i5.FiltersDTO);
  @override
  _i6.Filters fromDTO(_i5.FiltersDTO? dto) => (super.noSuchMethod(
        Invocation.method(
          #fromDTO,
          [dto],
        ),
        returnValue: _FakeFilters_4(
          this,
          Invocation.method(
            #fromDTO,
            [dto],
          ),
        ),
      ) as _i6.Filters);
}

/// A class which mocks [SortsMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortsMapper extends _i1.Mock implements _i15.SortsMapper {
  MockSortsMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Sorts fromDTO(_i8.SortsDTO? dto) => (super.noSuchMethod(
        Invocation.method(
          #fromDTO,
          [dto],
        ),
        returnValue: _FakeSorts_5(
          this,
          Invocation.method(
            #fromDTO,
            [dto],
          ),
        ),
      ) as _i7.Sorts);
  @override
  _i8.SortsDTO toDTO(_i7.Sorts? model) => (super.noSuchMethod(
        Invocation.method(
          #toDTO,
          [model],
        ),
        returnValue: _FakeSortsDTO_6(
          this,
          Invocation.method(
            #toDTO,
            [model],
          ),
        ),
      ) as _i8.SortsDTO);
}

/// A class which mocks [FreelanceMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFreelanceMapper extends _i1.Mock implements _i16.FreelanceMapper {
  MockFreelanceMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.JobFreelance fromDTO(_i3.JobDTO? dto) => (super.noSuchMethod(
        Invocation.method(
          #fromDTO,
          [dto],
        ),
        returnValue: _FakeJobFreelance_7(
          this,
          Invocation.method(
            #fromDTO,
            [dto],
          ),
        ),
      ) as _i9.JobFreelance);
  @override
  _i3.JobDTO toDTO(_i9.JobFreelance? model) => (super.noSuchMethod(
        Invocation.method(
          #toDTO,
          [model],
        ),
        returnValue: _FakeJobDTO_1(
          this,
          Invocation.method(
            #toDTO,
            [model],
          ),
        ),
      ) as _i3.JobDTO);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i17.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void d(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void i(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void w(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void e(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void wtf(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void log(
    _i17.Level? level,
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
