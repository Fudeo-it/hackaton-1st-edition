// Mocks generated by Mockito 5.4.0 from annotations
// in jobs_search/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dio/dio.dart' as _i2;
import 'package:jobs_search/models/api_models.dart' as _i5;
import 'package:jobs_search/models/app_models.dart' as _i4;
import 'package:jobs_search/services/notion_api_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiServiceModel_1 extends _i1.SmartFake
    implements _i3.ApiServiceModel {
  _FakeApiServiceModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJobOffer_2 extends _i1.SmartFake implements _i4.JobOffer {
  _FakeJobOffer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotionApiResponse_3 extends _i1.SmartFake
    implements _i5.NotionApiResponse {
  _FakeNotionApiResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotionApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotionApiService extends _i1.Mock implements _i3.NotionApiService {
  MockNotionApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  _i6.Future<_i3.ApiServiceModel> fetchJobOffers(
    String? dbId,
    _i5.NotionQuery? query,
    String? offerType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchJobOffers,
          [
            dbId,
            query,
            offerType,
          ],
        ),
        returnValue:
            _i6.Future<_i3.ApiServiceModel>.value(_FakeApiServiceModel_1(
          this,
          Invocation.method(
            #fetchJobOffers,
            [
              dbId,
              query,
              offerType,
            ],
          ),
        )),
      ) as _i6.Future<_i3.ApiServiceModel>);
  @override
  _i6.Future<_i3.ApiServiceModel> fetchFromDb(
    String? dbId,
    _i5.NotionQuery? query,
    String? offerType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFromDb,
          [
            dbId,
            query,
            offerType,
          ],
        ),
        returnValue:
            _i6.Future<_i3.ApiServiceModel>.value(_FakeApiServiceModel_1(
          this,
          Invocation.method(
            #fetchFromDb,
            [
              dbId,
              query,
              offerType,
            ],
          ),
        )),
      ) as _i6.Future<_i3.ApiServiceModel>);
  @override
  _i4.JobOffer makeJobOffer(
    _i5.Result? page,
    String? offerType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #makeJobOffer,
          [
            page,
            offerType,
          ],
        ),
        returnValue: _FakeJobOffer_2(
          this,
          Invocation.method(
            #makeJobOffer,
            [
              page,
              offerType,
            ],
          ),
        ),
      ) as _i4.JobOffer);
  @override
  String findJobName(Map<String, dynamic>? props) => (super.noSuchMethod(
        Invocation.method(
          #findJobName,
          [props],
        ),
        returnValue: '',
      ) as String);
  @override
  _i5.NotionApiResponse parseJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseJson,
          [json],
        ),
        returnValue: _FakeNotionApiResponse_3(
          this,
          Invocation.method(
            #parseJson,
            [json],
          ),
        ),
      ) as _i5.NotionApiResponse);
  @override
  String parseNotionNode(
    Map<String, dynamic>? json,
    String? prop, {
    String? textNode = r'plain_text',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseNotionNode,
          [
            json,
            prop,
          ],
          {#textNode: textNode},
        ),
        returnValue: '',
      ) as String);
  @override
  int parseMinSalary(
    Map<String, dynamic>? json,
    String? prop,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseMinSalary,
          [
            json,
            prop,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int parseMaxSalary(
    Map<String, dynamic>? json,
    String? prop,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #parseMaxSalary,
          [
            json,
            prop,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  List<int> parseSalaryString(String? salaryString) => (super.noSuchMethod(
        Invocation.method(
          #parseSalaryString,
          [salaryString],
        ),
        returnValue: <int>[],
      ) as List<int>);
}
